name: Visual Diff and PR Report

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  visual-diff:
    runs-on: 
      - runson
      - gpu-4x-large
    
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install NVIDIA FLIP for image comparison
      run: |
        # Install NVIDIA FLIP from PyPI for high-fidelity image comparison
        pip install flip-evaluator
        flip --help
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup Python for test execution
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow numpy
    
    - name: Create necessary directories
      run: |
        mkdir -p outputs
        mkdir -p diffs
        mkdir -p golden
    
    - name: Build render_sandbox
      run: |
        cargo build --release
    
    - name: Generate test outputs
      run: |
        # Run the application's test suite to generate output images
        python scripts/generate_test_images.py
    
    - name: Compare images and generate diffs
      id: compare
      run: |
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        # Create comparison report with summary table
        echo "# Visual Regression Test Results" > comparison_report.md
        echo "" >> comparison_report.md
        echo "**Test Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "## Summary" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "| File | Status | FLIP Mean Error | Result |" >> comparison_report.md
        echo "|------|--------|-----------------|--------|" >> comparison_report.md
        
        # Initialize summary data
        summary_data=""
        
        # Process each output image
        for output_file in outputs/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            summary_data="$summary_data| \`$filename\` | 🆕 New | N/A | Needs acceptance |\n"
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Compare using NVIDIA FLIP for high-fidelity comparison
            # FLIP outputs difference metrics and generates diff images
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            stats_file="diffs/${diff_basename}_stats.txt"
            
            # Debug: Print the command that will be executed
            echo "Variables:"
            echo "  golden_file: '$golden_file'"
            echo "  output_file: '$output_file'"
            echo "  diff_basename: '$diff_basename'"
            echo "  stats_file: '$stats_file'"
            echo "Golden file exists: $([ -f "$golden_file" ] && echo 'YES' || echo 'NO')"
            echo "Output file exists: $([ -f "$output_file" ] && echo 'YES' || echo 'NO')"
            echo ""
            
            # Ensure both files exist before running FLIP
            if [ ! -f "$golden_file" ]; then
              echo "Error: Golden file does not exist: $golden_file"
              continue
            fi
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file does not exist: $output_file"
              continue
            fi
            
            # Use enhanced FLIP parameters for comprehensive statistics
            echo "Running FLIP command: flip -r '$golden_file' -t '$output_file' -d diffs -b '$diff_basename' -v 2 -txt"
            
            # Run FLIP with enhanced verbosity and text output for detailed statistics
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 2 -txt 2>&1)
            flip_exit_code=$?
            
            echo "FLIP exit code: $flip_exit_code"
            echo "FLIP output: $flip_output"
            
            # Check if FLIP command succeeded
            if [ $flip_exit_code -ne 0 ]; then
              echo "Error: FLIP command failed with exit code $flip_exit_code"
              echo "Error output: $flip_output"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | FLIP failed |\n"
              continue
            fi
            
            # Extract comprehensive FLIP statistics from the output
            mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
            median_error=$(echo "$flip_output" | grep "Weighted median:" | awk '{print $3}')
            q1_error=$(echo "$flip_output" | grep "1st weighted quartile:" | awk '{print $4}')
            q3_error=$(echo "$flip_output" | grep "3rd weighted quartile:" | awk '{print $4}')
            min_error=$(echo "$flip_output" | grep "Min:" | awk '{print $2}')
            max_error=$(echo "$flip_output" | grep "Max:" | awk '{print $2}')
            ppd=$(echo "$flip_output" | grep "Pixels per degree:" | awk '{print $4}')
            eval_time=$(echo "$flip_output" | grep "Evaluation time:" | awk '{print $3}')
            
            # Check if there's any meaningful difference (FLIP error > 0.001)
            # Using awk for floating point comparison
            is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
            
            if [ "$is_different" = "yes" ]; then
              summary_data="$summary_data| \`$filename\` | 🔄 Changed | $mean_error | Needs review |\n"
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
            else
              summary_data="$summary_data| \`$filename\` | ✅ Passed | $mean_error | No changes |\n"
            fi
          fi
        done
        
        # Add summary data to report
        echo -e "$summary_data" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Add detailed results for changed/new images
        echo "## Detailed Results" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Note: Images will be available in workflow artifacts for download
        echo "ARTIFACT_DOWNLOAD_INFO" >> comparison_report.md
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ github.event.pull_request.number || github.run_number }}
        path: |
          outputs/
          diffs/
          golden/
          comparison_report.md
        retention-days: 30
    
    - name: Commit images to temporary branch for display
      id: commit_images
      run: |
        # Debug: Show current state before committing
        echo "=== Debug: Pre-commit state ==="
        echo "PWD: $(pwd)"
        echo "Current branch: $(git branch --show-current)"
        echo "Files in outputs/:"
        ls -la outputs/ || echo "outputs/ directory not found"
        echo "Files in diffs/:"
        ls -la diffs/ || echo "diffs/ directory not found"
        echo "Files in golden/:"
        ls -la golden/ || echo "golden/ directory not found"
        echo "Git status before commit:"
        git status
        echo "=============================================="
        
        # Create a unique branch name for this PR and run
        BRANCH_NAME="visual-diff-pr-${{ github.event.pull_request.number || 'manual' }}-run-${{ github.run_id }}"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
        # Store current branch/commit for restoration
        ORIGINAL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        ORIGINAL_COMMIT=$(git rev-parse HEAD)
        
        echo "=== Debug: Branch info ==="
        echo "Original branch: $ORIGINAL_BRANCH"
        echo "Original commit: $ORIGINAL_COMMIT"
        echo "New branch will be: $BRANCH_NAME"
        echo "=========================="
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create a temporary directory to store extracted binary content
        TEMP_GOLDEN_DIR="/tmp/golden_binary_$$"
        mkdir -p "$TEMP_GOLDEN_DIR"
        
        # Extract actual binary content from LFS before creating temporary branch
        echo "=== Debug: Extracting golden images from LFS ==="
        if [ -d "golden" ]; then
          echo "Golden images found in original branch:"
          ls -la golden/ || echo "No golden images in directory"
          
          # Extract binary content for each golden image
          for golden_file in golden/*.png golden/*.jpg golden/*.jpeg; do
            if [ -f "$golden_file" ]; then
              filename=$(basename "$golden_file")
              echo "Extracting binary content for $golden_file..."
              
              # Use git lfs smudge to extract actual binary content from LFS
              temp_file="$TEMP_GOLDEN_DIR/$filename"
              if git lfs smudge < "$golden_file" > "$temp_file" 2>/dev/null; then
                # Verify we got actual binary image data
                if file "$temp_file" | grep -q "PNG image data\|JPEG image data"; then
                  echo "✅ Successfully extracted binary image: $filename"
                  ls -la "$temp_file"
                else
                  echo "❌ $filename: git lfs smudge did not return image data, trying direct copy"
                  cp "$golden_file" "$temp_file"
                fi
              else
                echo "❌ git lfs smudge failed for $golden_file, using direct copy"
                cp "$golden_file" "$temp_file"
              fi
            fi
          done
        else
          echo "No golden directory found"
        fi
        
        # Create and switch to the temporary branch
        echo "Creating and switching to branch: $BRANCH_NAME"
        git checkout -b "$BRANCH_NAME"
        
        # CRITICAL: Remove .gitattributes FIRST and commit it to prevent LFS tracking
        echo "=== Debug: Disabling LFS in temporary branch ==="
        echo "Removing .gitattributes to prevent LFS tracking..."
        rm -f .gitattributes
        
        # Commit the .gitattributes removal first to ensure no LFS tracking
        git add .gitattributes 2>/dev/null || echo ".gitattributes already removed"
        git commit -m "Remove LFS tracking for image display branch" --allow-empty
        echo "✅ LFS tracking disabled in temporary branch"
        echo "================================================"
        
        # Remove the original golden directory completely and recreate with binary files
        echo "=== Debug: Setting up golden images in temporary branch ==="
        rm -rf golden/
        mkdir -p golden/
        
        # Install the extracted binary files as completely new files
        if [ -d "$TEMP_GOLDEN_DIR" ]; then
          for binary_file in "$TEMP_GOLDEN_DIR"/*; do
            if [ -f "$binary_file" ]; then
              filename=$(basename "$binary_file")
              echo "Installing binary golden image: $filename"
              cp "$binary_file" "golden/$filename"
              
              # Verify it's actual binary data in the temp branch
              if file "golden/$filename" | grep -q "PNG image data\|JPEG image data"; then
                echo "✅ golden/$filename is confirmed binary image data"
                ls -la "golden/$filename"
              else
                echo "❌ golden/$filename is not valid image data"
                head -2 "golden/$filename"
              fi
            fi
          done
        fi
        
        # Since LFS is now disabled, these should be added as regular binary files
        echo "=== Debug: Ensuring golden images are treated as regular binary files ==="
        echo "Git LFS status in temporary branch:"
        git lfs ls-files || echo "No LFS files (this is expected)"
        echo "=============================================="
        
        # Add all generated images and verify what's being added
        # Note: outputs/ and diffs/ are in .gitignore, so we need to force add them
        echo "=== Debug: Adding files ==="
        echo "Adding outputs/:"
        git add --force outputs/ && echo "✅ outputs/ added" || echo "❌ Failed to add outputs/"
        echo "Adding diffs/:"
        git add --force diffs/ && echo "✅ diffs/ added" || echo "❌ Failed to add diffs/"
        echo "Adding golden/:"
        git add golden/ && echo "✅ golden/ added" || echo "❌ Failed to add golden/"
        
        echo "Git status after adding:"
        git status
        echo "==========================="
        
        # Commit if there are changes
        if ! git diff --cached --quiet; then
          echo "=== Debug: Changes detected, committing ==="
          git diff --cached --name-only
          echo "Committing changes..."
          
          git commit -m "Temporary visual diff images for PR #${{ github.event.pull_request.number || github.run_number }}"
          
          echo "Commit successful, pushing to origin with retry logic..."
          # Push the branch with retry logic for race conditions
          PUSH_SUCCESS=false
          for attempt in 1 2 3; do
            echo "Push attempt $attempt..."
            if git push origin "$BRANCH_NAME"; then
              PUSH_SUCCESS=true
              echo "✅ Push successful on attempt $attempt"
              break
            else
              echo "❌ Push failed on attempt $attempt"
              if [ $attempt -lt 3 ]; then
                echo "Waiting before retry..."
                sleep $((attempt * 2))
                # Try to pull any conflicting changes and retry
                git pull origin "$BRANCH_NAME" --allow-unrelated-histories || echo "No remote branch to pull"
              fi
            fi
          done
          
          if [ "$PUSH_SUCCESS" = "true" ]; then
            echo "images_committed=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully committed images to branch: $BRANCH_NAME"
            
            # Debug: Verify images are accessible via HTTP URLs (for workflow debugging)
            echo "=== Debug: Verifying image commit success ==="
            REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/$BRANCH_NAME"
            echo "Repository URL: $REPO_URL"
            echo "================================================================"
          else
            echo "images_committed=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to push after 3 attempts"
          fi
        else
          echo "images_committed=false" >> $GITHUB_OUTPUT
          echo "❌ No changes to commit - this indicates the images were not generated or available"
        fi
        
        # Clean up temporary directory
        echo "Cleaning up temporary golden images directory..."
        rm -rf "$TEMP_GOLDEN_DIR" || echo "Failed to clean up temporary directory"
        
        # Return to original branch
        echo "Returning to original branch: $ORIGINAL_BRANCH"
        git checkout "$ORIGINAL_BRANCH"
    
    - name: Return to original branch
      if: always()
      run: |
        # Ensure we're back on the original branch for any subsequent steps
        ORIGINAL_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "HEAD")
        if [[ "$ORIGINAL_BRANCH" == visual-diff-* ]]; then
          git checkout ${{ github.head_ref || github.ref_name || 'main' }}
        fi

    - name: Generate comprehensive comparison report with embedded images
      id: generate_report
      run: |
        # Read the current comparison report
        if [ -f comparison_report.md ]; then
          BRANCH_NAME="${{ steps.commit_images.outputs.branch_name }}"
          
          if [ "${{ steps.commit_images.outputs.images_committed }}" = "true" ]; then
            # Update the comparison report with embedded GitHub raw URLs
            REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/$BRANCH_NAME"
            echo "=== Using repository URL: $REPO_URL ==="
            
            # Create image section
            echo "## 🖼️ Visual Comparison Results" > image_section.md
            echo "" >> image_section.md
            echo "> **Note:** Images may take a few moments to load due to CDN propagation. If images don't display immediately, please refresh the page or try again in a minute." >> image_section.md
            echo "" >> image_section.md
            echo "### Changed Images" >> image_section.md
            
            # Get list of image files from the changed_images output instead of filesystem
            CHANGED_IMAGES="${{ steps.compare.outputs.changed_images }}"
            echo "=== Changed images: '$CHANGED_IMAGES' ==="
            
            if [ -n "$CHANGED_IMAGES" ] && [ "$CHANGED_IMAGES" != " " ]; then
              # Process each changed image
              for filename in $CHANGED_IMAGES; do
                echo "=== Processing image: $filename ==="
                
                echo "" >> image_section.md
                echo "#### $filename" >> image_section.md
                echo "" >> image_section.md
                
                # Add golden master if it would exist
                golden_url="$REPO_URL/golden/$filename"
                echo "**Golden Master (Expected):**" >> image_section.md
                echo "![Golden Master]($golden_url)" >> image_section.md
                echo "" >> image_section.md
                
                # Add new output
                output_url="$REPO_URL/outputs/$filename"
                echo "**New Output (Actual):**" >> image_section.md
                echo "![New Output]($output_url)" >> image_section.md
                echo "" >> image_section.md
                
                # Add diff
                diff_url="$REPO_URL/diffs/diff_$filename"
                echo "**Visual Difference (Highlighted Changes):**" >> image_section.md
                echo "![Difference]($diff_url)" >> image_section.md
                echo "" >> image_section.md
                
                echo "---" >> image_section.md
              done
              
              # Add acceptance commands section
              echo "" >> image_section.md
              echo "### 🔧 Accept New Images" >> image_section.md
              echo "" >> image_section.md
              echo "To accept any of the new output images as golden masters, copy and paste the relevant commands below:" >> image_section.md
              echo "" >> image_section.md
              echo "\`\`\`" >> image_section.md
              for filename in $CHANGED_IMAGES; do
                echo "/accept-image $filename" >> image_section.md
              done
              echo "\`\`\`" >> image_section.md
              echo "" >> image_section.md
              echo "> **Note:** These commands will commit the new images to the **PR branch** (not the temporary display branch) and update the golden master files for future comparisons." >> image_section.md
            else
              echo "No changed images found to display." >> image_section.md
            fi
            
            echo "" >> image_section.md
            echo "### 📦 Backup Download" >> image_section.md
            echo "If images don't load above, download the complete results: **[Visual Test Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> image_section.md
            echo "" >> image_section.md
            echo "> 🧹 The temporary branch \`$BRANCH_NAME\` will be automatically cleaned up after 7 days." >> image_section.md
            
            # Replace the placeholder in the main report
            sed -i '/ARTIFACT_DOWNLOAD_INFO/r image_section.md' comparison_report.md
            sed -i '/ARTIFACT_DOWNLOAD_INFO/d' comparison_report.md
            
            echo "✅ Enhanced comparison report generated with embedded images"
          else
            echo "❌ Images were not committed, using fallback"
            # Fallback to artifact download if commit failed
            sed -i 's|ARTIFACT_DOWNLOAD_INFO|## 🖼️ Image Files Available for Download\n\nImages could not be embedded directly. Download the complete results:\n\n📦 **[Download Visual Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**\n\n### Artifact Contents:\n- **`outputs/`** - New test images\n- **`diffs/`** - Visual differences\n- **`golden/`** - Golden master images\n- **`comparison_report.md`** - This report|' comparison_report.md
          fi
        else
          echo "No comparison report found"
        fi
    
    - name: Debug outputs before commenting
      run: |
        echo "=== Debug Step Outputs ==="
        echo "changes_detected: '${{ steps.compare.outputs.changes_detected }}'"
        echo "changed_images: '${{ steps.compare.outputs.changed_images }}'"
        echo "images_committed: '${{ steps.commit_images.outputs.images_committed }}'"
        echo "branch_name: '${{ steps.commit_images.outputs.branch_name }}'"
        echo "========================="
    
    - name: Comment PR with results
      if: steps.compare.outputs.changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Check if images were successfully committed
          const imagesCommitted = '${{ steps.commit_images.outputs.images_committed }}' === 'true';
          
          if (!imagesCommitted) {
            // Fail the workflow if images couldn't be embedded
            core.setFailed('Visual regression testing found differences, but images could not be committed for display. This is considered a failure.');
            return;
          }
          
          // Clean up old bot comments for this scenario first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });
    
    - name: Comment PR with success
      if: steps.compare.outputs.changes_detected == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const report = "✅ **Visual tests passed!** No differences detected.\n\n**Test Date:** " + new Date().toISOString().replace('T', ' ').substr(0, 19) + " UTC";
          
          // Clean up old bot comments first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual tests passed')
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });

  cleanup-old-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up old visual diff branches
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Get current timestamp (7 days ago)
        CUTOFF_DATE=$(date -d '7 days ago' '+%Y-%m-%d')
        echo "Cleaning up visual diff branches older than: $CUTOFF_DATE"
        
        # Find and delete old visual-diff branches
        git branch -r | grep 'origin/visual-diff-' | while read -r branch; do
          branch_name=${branch#origin/}
          echo "Checking branch: $branch_name"
          
          # Get the last commit date of the branch
          if git show --format="%ci" --no-patch "$branch" > /dev/null 2>&1; then
            BRANCH_DATE=$(git show --format="%ci" --no-patch "$branch" | cut -d' ' -f1)
            echo "Branch date: $BRANCH_DATE"
            
            # Compare dates (if branch is older than cutoff, delete it)
            if [[ "$BRANCH_DATE" < "$CUTOFF_DATE" ]]; then
              echo "Deleting old branch: $branch_name"
              git push origin --delete "$branch_name" || echo "Failed to delete $branch_name (may not exist)"
            else
              echo "Keeping recent branch: $branch_name"
            fi
          else
            echo "Could not get date for branch: $branch_name"
          fi
        done